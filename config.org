* Theme
** zerodark
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :ensure t
    :init
    (load-theme 'zerodark t))
#+END_SRC
** some customization
#+BEGIN_SRC emacs-lisp
  (let ((class '((class color) (min-colors 89)))
	(default (if (true-color-p) "#abb2bf" "#afafaf"))
	(light (if (true-color-p) "#ccd4e3" "#d7d7d7"))
	(background (if (true-color-p) "#282c34" "#333333"))
	(background-dark (if (true-color-p) "#24282f" "#222222"))
	(background-darker (if (true-color-p) "#22252c" "#222222"))
	(mode-line-inactive (if "#1c2129" "#222222"))
	(mode-line-active (if (true-color-p) "#6f337e" "#875f87"))
	(background-lighter (if (true-color-p) "#3a3f4b" "#5f5f5f"))
	(background-red (if (true-color-p) "#4c3840" "#5f5f5f"))
	(bright-background-red (if (true-color-p) "#744a5b" "#744a5b"))
	(background-purple (if (true-color-p) "#48384c" "#5f5f5f"))
	(background-blue (if (true-color-p) "#38394c" "#444444"))
	(bright-background-blue (if (true-color-p) "#4e5079" "#4e5079"))
	(background-green (if (true-color-p) "#3d4a41" "#5f5f5f"))
	(bright-background-green (if (true-color-p) "#3f6d54" "#3f6d54"))
	(background-orange (if (true-color-p) "#4a473d" "#5f5f5f"))
	(hl-line (if (true-color-p) "#2c323b" "#333333"))
	(grey (if (true-color-p) "#cccccc" "#cccccc"))
	(grey-dark (if (true-color-p) "#666666" "#666666"))
	(highlight (if (true-color-p) "#3e4451" "#5f5f5f"))
	(comment (if (true-color-p) "#687080" "#707070"))
	(orange (if (true-color-p) "#da8548" "#d7875f"))
	(orange-light (if (true-color-p) "#ddbd78" "#d7af87"))
	(red (if (true-color-p) "#ff6c6b" "#ff5f5f"))
	(purple (if (true-color-p) "#c678dd" "#d787d7"))
	(purple-dark (if (true-color-p) "#64446d" "#5f5f5f"))
	(blue (if (true-color-p) "#61afef" "#5fafff"))
	(blue-dark (if (true-color-p) "#1f5582" "#005f87"))
	(green (if (true-color-p) "#98be65" "#87af5f"))
	(green-light (if (true-color-p) "#9eac8c" "#afaf87"))
	(peach "PeachPuff3")
	(diff-added-background (if (true-color-p) "#284437" "#284437"))
	(diff-added-refined-background (if (true-color-p) "#1e8967" "#1e8967"))
	(diff-removed-background (if (true-color-p) "#583333" "#580000"))
	(diff-removed-refined-background (if (true-color-p) "#b33c49" "#b33c49"))
	(diff-current-background (if (true-color-p) "#29457b" "#29457b"))
	(diff-current-refined-background (if (true-color-p) "#4174ae" "#4174ae")))

    (custom-theme-set-faces
     'zerodark

     `(fancy-battery-charging ((,class (:background ,background-blue :height 1.0 :bold t))))
     `(fancy-battery-discharging ((,class (:background ,background-blue :height 1.0))))
     `(fancy-battery-critical ((,class (:background ,background-blue :height 1.0))))
   
     ;; mode line stuff
     `(mode-line ((,class (:background ,background-blue :height 1.0 :foreground ,blue
				       :distant-foreground ,background-blue
				       :box ,(when zerodark-use-paddings-in-mode-line
					       (list :line-width 6 :color background-blue))))))
   
     `(mode-line-inactive ((,class (:background ,background-blue :height 1.0 :foreground ,default
						:distant-foreground ,background-blue
						:box ,(when zerodark-use-paddings-in-mode-line
							(list :line-width 6 :color background-blue))))))

     `(header-line ((,class (:inherit mode-line-inactive))))

     `(powerline-active0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
					   :distant-foreground ,background-blue))))
     `(powerline-active1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
					   :distant-foreground ,background-blue))))
     `(powerline-active2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
					   :distant-foreground ,background-blue))))
     `(powerline-inactive0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
					     :distant-foreground ,background-blue))))
     `(powerline-inactive1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
					     distant-foreground ,background-blue))))
     `(powerline-inactive2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
					     :distant-foreground ,background-blue))))

     `(dashboard-heading-face ((,class (:background ,background :foreground ,blue
						    :bold t :height 1.2))))
     `(dashboard-banner-logo-title-face ((,class (:background ,background :foreground ,blue
							      :bold t :height 1.2))))
     `(widget-button ((,class (:background ,background :foreground ,default :bold nil
					   :underline t :height 0.9))))
   
     ;; erc stuff
     `(erc-nick-default-face ((,class :foreground ,blue :background ,background :weight bold)))

     ;; org stuff
     `(outline-1 ((,class (:foreground ,blue :weight bold :height 1.8 :bold nil))))
     `(outline-2 ((,class (:foreground ,purple :weight bold :height 1.7 :bold nil))))
     `(outline-3 ((,class (:foreground ,peach :weight bold :height 1.6 :bold nil))))
     `(outline-4 ((,class (:foreground ,green-light :weight bold :height 1.5 :bold nil))))
     `(outline-5 ((,class (:foreground ,blue :weight bold :height 1.4 :bold nil))))
     `(outline-6 ((,class (:foreground ,purple :weight bold :height 1.3 :bold nil))))
     `(outline-7 ((,class (:foreground ,peach :weight bold :height 1.2 :bold nil))))
     `(outline-8 ((,class (:foreground ,green-light :weight bold :height 1.1 :bold nil))))
   
     `(org-block-begin-line ((,class (:background ,background-blue :foreground ,blue
						  :bold t :height 1.0))))
     `(org-block-end-line ((,class (:background ,background-blue :foreground ,blue
						:bold t :height 1.0))))))
#+END_SRC
* Terminal
** Setting default shell to zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** bind Command-Enter to open shell
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-RET") 'ansi-term)
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC

* Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

* Org
** common settings
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** add template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
		    '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
so you can just type *<el* then hit TAB
** line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    '(lambda ()
	       (visual-line-mode 1)))
#+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC
* Misc
** Shortcut from yes/no to y/n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Highline current line
#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
** Prettier symbol (only on gui)
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))
#+END_SRC
** Disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** Disable menubar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
** Disable scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Disable startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** scroll by one line
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** ignore ring bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** disable backup file and auto save
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** electric pair
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ))
  (electric-pair-mode t)
#+END_SRC
** show lines and columns on the modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** Set UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  ;;(setq ido-enable-flex-matching nil)
  ;;(setq ido-create-new-buffer 'always)
  ;;(setq ido-everywhere t)
  ''(ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex (ido like for M-x)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** expert mode
 #+BEGIN_SRC emacs-lisp
   (setq ibuffer-expert t)
 #+END_SRC
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun fisthu/kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'fisthu/kill-current-buffer)
#+END_SRC
** kill-all-buffers
#+BEGIN_SRC emacs-lisp
  (defun fisthu/kill-all-buffers ()
    "Kill all buffers!."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'fisthu/kill-all-buffers)
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun fisthu/open-cfg ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'fisthu/open-cfg)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun fisthu/reload-cfg ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'fisthu/reload-cfg)
#+END_SRC
* Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* Window splitting function
#+BEGIN_SRC emacs-lisp
  (defun fisthu/split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'fisthu/split-and-follow-horizontally)

  (defun fisthu/split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'fisthu/split-and-follow-vertically)
#+END_SRC
* Text manipulation
** copy-a-line
#+BEGIN_SRC emacs-lisp
  (defun fisthu/copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c l c") 'fisthu/copy-whole-line)
#+END_SRC
** copy whole word
#+BEGIN_SRC emacs-lisp
  (defun fisthu/copy-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c w c") 'fisthu/copy-word)
#+END_SRC
** kill-inner-word
#+BEGIN_SRC emacs-lisp
  (defun fisthu/kill-inner-word ()
    "Kills the entire word where the current cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'fisthu/kill-inner-word)
#+END_SRC
** mark multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
** kill a line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC
* Hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
    (setq dashboard-items '((recents . 5)
			    (projects . 5)))
    (setq dashboard-banner-logo-title "Assalamualaikum!"))
#+END_SRC
* exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when IS-MAC
      (exec-path-from-shell-initialize)))
#+END_SRC
* Programming
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
** lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; use flycheck instead
    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    :hook ((python-mode c-mode c++-mode java-mode) . lsp))
#+END_SRC
** lsp-ui
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :after lsp-mode
    :ensure t
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header (( t (:inherit (font-lock-string-face italic)))))
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)
                ("C-c u" . lsp-ui-imenu))
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    ;; use lsp-ui-doc-webkit only on GUI
    (setq lsp-ui-doc-use-webkit t)
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil)))
#+END_SRC
** helm-lsp
#+BEGIN_SRC emacs-lisp
  (use-package helm-lsp
    :after lsp-mode
    :ensure t
    :commands helm-lsp-workspace-symbol)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC
** company-lsp
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :ensure t
    :config
    (setq company-lsp-enable-snippet t)
    (push 'company-lsp company-backends))
#+END_SRC
** specific languages
*** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/local/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC
** lsp-java
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :ensure t
    :after lsp
    :config
    (add-hook 'java-mode-hook 'lsp))
#+END_SRC
* Modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'which-key-mode)
    (diminish 'flycheck-mode)
    (diminish 'yas-minor-mode)
    (diminish 'org-indent-mode)
    (diminish 'linum-relative-mode)
    (diminish 'visual-line-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'helm-mode))
#+END_SRC
* Dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-m" . 'dmenu))
#+END_SRC
* Symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-y" . symon-mode))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC
* Show parens
highlights matching parens when the cursor is just behind one of them
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
* Line numbers relative
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
* async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
* projectile
** enable globally
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (define-key projectile-mode-map [?\s-d] 'projectile-find-dir)
    (define-key projectile-mode-map [?\s-p] 'projectile-switch-project)
    (define-key projectile-mode-map [?\s-f] 'projectile-find-file)
    (define-key projectile-mode-map [?\s-g] 'projectile-grep)
    (setq projectile-project-search-path '("~/dev/"))
    (projectile-mode +1))
#+END_SRC
* expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (defun fisthu/hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
	(let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	  (overlay-put ov 'window (selected-window))
	  (overlay-put ov 'face
		       (let ((bg-color (face-background 'default nil)))
			 `(:background ,bg-color :foreground ,bg-color)))
	  (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'fisthu/hide-minibuffer)
    (setq helm-autoresize-max-height 0
	  helm-autoresize-min-height 40
	  helm-M-x-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-recentf-fuzzy-match t
	  helm-semantic-fuzzy-match t
	  helm-imenu-fuzzy-match t
	  helm-split-window-in-side-p nil
	  helm-move-to-line-cycle-in-source nil
	  helm-ff-search-library-in-sexp t
	  helm-scroll-amount 8
	  helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (require 'helm-config)
  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+END_SRC
